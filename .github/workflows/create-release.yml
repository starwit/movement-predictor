name: Create release

on:
  workflow_dispatch:
    inputs:
      versionChoice:
        type: choice
        required: true
        description: Version Change
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

jobs:
  checkout:
    name: checkout
    runs-on: [self-hosted, linux, X64]

    steps:
      - name: checkout project definition
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
  
  createversion:
    name: "Create new project version"
    needs: checkout
    runs-on: [self-hosted, linux, X64]
    container:
      image: acidrain/python-poetry:3.11-slim-1.8.5

    steps:
    - name: create new version in pyproject.toml
      run: |
        poetry version $VERSION
      env:
        VERSION: ${{ inputs.versionChoice }}

  pushversion:
    name: checkin pyproject.toml and create github release
    needs: createversion
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Install GH CLI
      uses: dev-hanz-ops/install-gh-cli-action@v0.2.0

    - name: commit new version
      run: |
        git config --global user.email "code@starwit.de"
        git config --global user.name "Starwit"
        git remote set-url --push origin https://Starwit:$GITHUB_TOKEN@github.com/starwit/sae-anomaly-detection.git
        git add .
        modifications=$(git status | grep "modified" || true)
        if [ ! -z "$modifications" ]
        then
          echo "modifications found: $modifications"
          git commit -m "modified project version" ./pyproject.toml
          git push
        fi 
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create github release
      run: | 
        APP_VERSION=$(cat pyproject.toml | grep "version" | cut -d'=' -f2 | xargs echo -n)
        gh release create $APP_VERSION -F README.md
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ inputs.versionChoice }}
  
  build:
    name: "Build and run docker image"
    needs: createversion
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: build docker
      env:
        GIT_CREDENTIALS: https://starwit:${{ secrets.VISION_PIPELINE_READ_TOKEN }}@github.com
      run: |
        docker build --secret id=GIT_CREDENTIALS -t docker.internal.starwit-infra.de/sae-anomaly-detection:tmp .

  publish_docker:
    name: "Publish docker"
    needs: build
    runs-on: [self-hosted, linux, X64]

    steps:
    - name: Login internal docker registry
      uses: docker/login-action@v3
      with:
        registry: docker.internal.starwit-infra.de
        username: ${{ secrets.DOCKER_INTERNAL_USERNAME }}
        password: ${{ secrets.DOCKER_INTERNAL_PASSWORD }}
        
    - name: push docker versioned
      run: |
        DOCKER_VERSION=$(cat pyproject.toml | grep "version" | cut -d'=' -f2 | xargs echo -n)
        docker tag docker.internal.starwit-infra.de/sae-anomaly-detection:tmp docker.internal.starwit-infra.de/sae-anomaly-detection:$DOCKER_VERSION
        docker push docker.internal.starwit-infra.de/sae-anomaly-detection:$DOCKER_VERSION

  cleanup:
    name: "Clean docker"
    needs: [publish_docker, build ] 
    runs-on: [self-hosted, linux, X64]
    if: always()

    steps:
      - name: docker cleanup
        run: |
          docker buildx prune -af

  publish_helm:
    name: "Publish helm chart"
    needs: createversion
    runs-on: [self-hosted, linux, X64]
    
    steps:
    - name: get helm
      uses: azure/setup-helm@v4

    - name: run helm package
      working-directory: deployment/helm
      run: |
        HELM_VERSION=$(cat ../../pyproject.toml | grep "version" | cut -d'=' -f2 | xargs echo -n)
        helm package . --version $HELM_VERSION --app-version $HELM_VERSION

    - name: run helm push
      working-directory: deployment/helm
      run: |
        HELM_VERSION=$(cat ../../pyproject.toml | grep "version" | cut -d'=' -f2 | xargs echo -n)
        curl -i --fail-with-body -u chartmuseum:${{ secrets.HELM_INTERNAL_PASSWORD }} --data-binary "@anomaly-detection-$HELM_VERSION.tgz" https://helm.internal.starwit-infra.de/api/charts
